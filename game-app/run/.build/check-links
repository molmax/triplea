#!/bin/bash

set -eu

URI_FILE=$(find . -type f -path "*/src/main/java/*" -name "UrlConstants.java")
green="\e[32m"
end="\e[0m"
IGNORE_REGEX="www.axisandallies.org|forums.triplea-game.org|prod.triplea-game.org"

if [ -z "$URI_FILE" ]; then
  echo "Error could not find file 'UrlConstants.java'"
  exit 1
fi



function checkUri() {
  local -r uri="$1"
  local code
  if ! code=$(curl -Lsf -o /dev/null -w "%{http_code}" "$uri"); then
    reportBrokenUri "$uri" "$code"
    FAILURE=1
  else
    echo "Successfully checked '$uri', returned $code"
  fi
}

function reportBrokenUri() {
  local -r red="\e[38;5;196m"
  local -r blue="\e[38;5;75m"
  local -r error_reason=$([[ $2 -ne 0 ]] && echo "Failed with Code: $2" || echo "Connection Failure!")
  echo -e "Error: ${red}${1}${end} ${blue}${error_reason}${end}"
}

function checkIsOnIgnoreList() {
  for ignored_uri in "${IGNORE_LIST[@]}"; do
    if [[ "$1" = "$ignored_uri" ]]
    then
      echo "Ignoring '$1'"
      return 0
    fi
  done
  return 1
}

FAILURE=0

# export checkUri function so that it is visible to 'parallel' command below
export -f checkUri

# in parallel, check that each URI is available, filtering out elements from the ignore list
sed 's/^.*"\(.*\)".*$/\1/' "$URI_FILE" \
   | grep "http" \
   | grep -Ev "$IGNORE_REGEX" \
   | parallel checkUri {}

if [ "$FAILURE" == 0 ]; then
  echo -e "${green}Links are valid${end}"
fi
exit "$FAILURE"

